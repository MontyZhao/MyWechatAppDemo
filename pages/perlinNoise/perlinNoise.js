// pages/perlinNoise/perlinNoise.js
// const SimplexNoise = require('./perlin-noise-simplex.js');
// // console.log(SimplexNoise);
// require('./seedrandom.js')
// Math.seedrandom('hello.');

// console.log(Math.random()); // Always 0.9282578795792454
// console.log(Math.random()); // Always 0.3752569768646784
// function getRandomInt(min, max) {
//     return Math.floor(Math.random() * (max - min + 1)) + min;
// }

// function GenerateWhiteNoise(width, height) {
//     // 这里的随机数种子很重要
//     // 如果想要每次生成的 Perlin Noise 都一样，只要设置一个相同的值即可
//     // 这里使用随机种子，所有每次都会生成不同的 Perlin Noise
//     Math.seedrandom(getRandomInt(Number.MIN_VALUE, Number.MAX_VALUE));
//     let noise = [width, height];

//     for (let i = 0; i < width; i++) {
//         for (let j = 0; j < height; j++) {
//             noise[i, j] = [Math.random(), Math.random()];
//         }
//     }

//     return noise;
// }

// console.log(GenerateWhiteNoise(199, 199))

const tools = require('../color/color-conversion-algorithms.js')
const noise = require('./perlin.js')
console.log(noise)
// console.log(requestAnimationFrame);

const canvasId = 'cvs',
    CANVAS_W = 300,
    CANVAS_H = 300;

function createImageData(w, h) {
    return {
        data: new Uint8ClampedArray(4 * w * h),
        width: w,
        height: h
    }
}
Page({
    data: {

    },
    onLoad: function(options) {},
    onReady() {
        const z = this;
        // run();
        function run() {
            z.deal();
            // console.log(Math.random())
            setTimeout(run, 1000);
        }
        // requestAnimationFrame(run)
        this.p();
    },
    load() {
        const z = this;

        let ctx = wx.createCanvasContext('cvs', this)

        // wx.getImageInfo({
        //     src: 'https://static1.squarespace.com/static/5a39922ff6576e7a0ba4ec30/t/5b10f2be70a6ad1221b761a8/1527837393971/433146d4_6623_4cac_b5eb_a2e85f184dce_by_yasa_hime-dcd42k0.png?format=750w',
        //     success: res => {
        //         ctx.drawImage(res.path, 0, 0, 300, 300);
        //         ctx.draw(true, function() {

        // wx.canvasGetImageData({
        //     canvasId: canvasId,
        //     x: 0,
        //     y: 0,
        //     width: w,
        //     height: h,
        //     success(res) {
        //         console.log(res);
        //         z.deal(res);
        //     }
        // })
        //         });
        //     }
        // })
    },
    deal() {
        let ctx = wx.createCanvasContext(canvasId, this);
        var image = createImageData(CANVAS_W, CANVAS_H);
        var data = image.data;
        var start = Date.now();
        for (var x = 0; x < CANVAS_W; x++) {
            if (x % 300 == 0) {
                noise.seed(Math.random());
            }
            for (var y = 0; y < CANVAS_H; y++) {
                var value = Math.abs(noise.perlin2(x / 100, y / 100));
                value *= 256;
                var cell = (x + y * CANVAS_W) * 4;
                data[cell] = data[cell + 1] = data[cell + 2] = value;
                data[cell] += Math.max(0, (25 - value) * 8);
                data[cell + 3] = 255; // alpha.
            }
        }
        /* // Benchmark code.
        start = Date.now();
        for (var x = 0; x < 10000; x++) {
          for (var y = 0; y < 10000; y++) {
            noise.simplex2(x / 50, y/50);
          }
        }*/
        var end = Date.now();
        // ctx.fillColor = 'black';
        // ctx.setFillStyle('black');
        // ctx.fillRect(0, 0, w, h);
        // ctx.putImageData(image, 0, 0);
        wx.canvasPutImageData({
            canvasId: canvasId,
            x: 0,
            y: 0,
            width: CANVAS_W,
            height: CANVAS_H,
            data: data,
            success(res) {}
        })
        // ctx.font = '16px sans-serif'
        // ctx.textAlign = 'center';
        // ctx.fillText('Rendered in ' + (end - start) + ' ms', canvas.width / 2, canvas.height - 20);
        if (console) {
            console.log('Rendered in ' + (end - start) + ' ms');
        }
        // ctx.draw();
    },
    p() {
        // Generated by CoffeeScript 1.3.3
        var TAU, button, canvas, ctx, draw, f, fpselem, h, p1, particles, period, raf, w, _i;

        // canvas = document.getElementsByTagName('canvas')[0];

        // fpselem = document.getElementById('fps');

        // w = canvas.width = 1440;

        // h = canvas.height = 900;

        TAU = 2 * Math.PI;

        // ctx = canvas.getContext('2d');
        ctx = wx.createCanvasContext(canvasId, this);

        period = 1 / 800;

        // ctx.fillStyle = 'white';
        ctx.setFillStyle('white');

        ctx.fillRect(0, 0, w, h);
        // ctx.draw(true);

        // ctx.fillStyle = 'rgba(1,1,1,0.3)';
        ctx.setFillStyle('rgba(1,1,1,0.3)');

        noise.seed(Math.random());

        particles = [];

        for (_i = 1; _i <= 2000; _i++) {
            p1 = {
                x: Math.random() * CANVAS_W,
                y: CANVAS_H / 2 + Math.random() * 50,
                a: 0
            };
            particles.push(p1);
            particles.push({
                x: p1.x,
                y: p1.y,
                a: TAU / 2
            });
        }
        function getRandomColor() {
            var letters = '0123456789ABCDEF';
            var color = '#';
            for (var i = 0; i < 6; i++) {
                color += letters[Math.floor(Math.random() * 16)];
            }
            return color;
        }
        draw = function() {
            var a, p, v, _j, _len, _results;
            _results = [];
            for (_j = 0, _len = particles.length; _j < _len; _j++) {
                p = particles[_j];
                v = noise.perlin2(p.x * period, p.y * period);
                // console.log(p);
                // console.log(v);
                // console.log(Math.floor(v * 360));
                // break;
                // ctx.fillStyle = "hsla(" + (Math.floor(v * 360)) + ", 95%, 20%, 0.05)";
                // ctx.setFillStyle("hsla(" + (Math.floor(v * 360)) + ", 95%, 20%, 0.05)");
                let temp = tools.hslToRgb({
                    h: Math.floor(v * 360)/100.0,
                    s: 0.95,
                    l: 0.2
                });
                // console.log(temp);
                ctx.setFillStyle(`rgba(${temp[0]}, ${temp[1]}, ${temp[2]}, 0.05)`);
                // ctx.fillRect(p.x, p.y, CANVAS_W, CANVAS_H);
                ctx.fillRect(p.x, p.y, 1.5, 1.5);
                p.h++;
                a = v * 2 * Math.PI + p.a;
                p.x += Math.cos(a);
                _results.push(p.y += Math.sin(a));
            }
            ctx.draw(true)
            return _results;
        };

        // raf = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {
        //     return window.setTimeout(callback, 1000 / 60);
        // };
        function raf() {
            // console.log(Math.random());
            // ctx.draw(true);
            draw();
            return setTimeout(raf, 1000);
        };
        // draw();
        raf()

        // button = document.getElementsByTagName('input')[0];

        // button.onclick = function () {
        //     return window.open(canvas.toDataURL('image/png'));
        // };

        // f = function() {
        //     raf(f);
        //     return draw();
        // };

        // raf(f);
    }
})